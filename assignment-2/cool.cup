/*
 *  cool.cup
 *              Parser definition for the COOL language.
 *
 */

import java_cup.runtime.*;

/* Stuff enclosed in {: :} is copied verbatim to the class containing
all parser actions.  All the extra variables/functions you want to use
in the semantic actions should go here.  Don't remove or modify anything
that was there initially.  */

action code {:

    int curr_lineno() {
	return ((CoolTokenLexer)parser.getScanner()).curr_lineno();
    }

    AbstractSymbol curr_filename() {
	return ((CoolTokenLexer)parser.getScanner()).curr_filename();
    }
:}

/************************************************************************/
/*                DONT CHANGE ANYTHING IN THIS SECTION                  */

parser code {:
    int omerrs = 0;

    public void syntax_error(Symbol cur_token) {
        int lineno = action_obj.curr_lineno();
	String filename = action_obj.curr_filename().getString();
        System.err.print("\"" + filename + "\", line " + lineno +
		         ": parse error at or near ");
        Utilities.printToken(cur_token);
	omerrs++;
	if (omerrs>50) {
	   System.err.println("More than 50 errors");
	   System.exit(1);
	}
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
    }
:}

/* Declare the terminals; a few have types for associated lexemes.  The
token ERROR is never used in the parser; thus, it is a parse error when
the lexer returns it.  */

terminal CLASS, ELSE, FI, IF, IN, INHERITS, LET, LET_STMT, LOOP, POOL, THEN, WHILE;
terminal CASE, ESAC, OF, DARROW, NEW, ISVOID;
terminal ASSIGN, NOT, LE, ERROR;
terminal PLUS, DIV, MINUS, MULT, EQ, LT, DOT, NEG, COMMA, SEMI, COLON;
terminal LPAREN, RPAREN, AT, LBRACE, RBRACE;
terminal AbstractSymbol STR_CONST, INT_CONST;
terminal Boolean BOOL_CONST;
terminal AbstractSymbol TYPEID, OBJECTID;

/*  DON'T CHANGE ANYTHING ABOVE THIS LINE, OR YOUR PARSER WONT WORK       */
/**************************************************************************/

   /* Complete the nonterminal list below, giving a type for the semantic
      value of each non terminal. (See the CUP documentation for details. */

nonterminal programc program;
nonterminal Classes class_list;
nonterminal class_c class;
nonterminal Features feature_list;
nonterminal Feature feature;
nonterminal Formals formal_list;
nonterminal Formals non_empty_formal_list;
nonterminal Formal formal;
nonterminal Expression expression;
nonterminal Expression atomic_expression;
nonterminal Expression arith_expression;

/* Precedence declarations go here. */

program ::=
        class_list:cl
        {: RESULT = new programc(curr_lineno(), cl); :}
;

class_list ::=
           /* single class */
           class:c
           {: RESULT = (new Classes(curr_lineno())).appendElement(c); :}
           |
           /* several classes */
           class_list:cl class:c
           {: RESULT = cl.appendElement(c); :}
;

/* If no parent is specified, the class inherits from the Object class */
class ::=
      CLASS TYPEID:n LBRACE feature_list:f RBRACE SEMI
      {: RESULT = new class_c(curr_lineno(), n,
                              AbstractTable.idtable.addString("Object"),
                              f, curr_filename()); :}
      |
      CLASS TYPEID:n INHERITS TYPEID:p LBRACE feature_list:f RBRACE SEMI
      {: RESULT = new class_c(curr_lineno(), n, p, f, curr_filename()); :}
;

/* Feature list may be empty, but no empty features in list. */
feature_list ::=
             /* empty */
             {: RESULT = new Features(curr_lineno()); :}
             |
             /* several features */
             feature_list:fl feature:f
             {: RESULT = fl.appendElement(f); :}
;

feature ::=
        /* an attribute, without initializing expressions, for time being */
        OBJECTID:n COLON TYPEID:t SEMI
        {: RESULT = new attr(curr_lineno(), n, t,
                             new no_expr(curr_lineno())); :}
        |
        /* a method with empty body body (for time being) */
        OBJECTID:n LPAREN formal_list:fs RPAREN COLON TYPEID:t LBRACE RBRACE SEMI
        {: RESULT = new method(curr_lineno(), n, fs, t,
                               new no_expr(curr_lineno())); :}
;

/* Formal list */
formal_list ::=
            /* empty */
            {: RESULT = new Formals(curr_lineno()); :}
            |
            /* several formals */
            non_empty_formal_list:fl
            {: RESULT = fl; :}
;

non_empty_formal_list ::=
                      formal: f
                      {: RESULT = (new Formals(curr_lineno())).appendElement(f); :}
                      |
                      /* several formals */
                      non_empty_formal_list:fl COMMA formal:f
                      {: RESULT = fl.appendElement(f); :}
;

formal ::=
       OBJECTID:n COLON TYPEID:t
       {: RESULT = new formalc(curr_lineno(), n, t); :}
;

expression ::=
           atomic_expression:e
           {: RESULT = e; :}
           |
           arith_expression:e
           {: RESULT = e; :}
;


atomic_expression ::=
                  OBJECTID:n
                  {: RESULT = new object(curr_lineno(), n); :}
                  |
                  INT_CONST:i
                  {: RESULT = new int_const(curr_lineno(), i); :}
                  |
                  STR_CONST:s
                  {: RESULT = new string_const(curr_lineno(), s); :}
                  BOOL_CONST:b
                  {: RESULT = new bool_const(curr_lineno(), b); :}
;

arith_expression ::=
                 expression:e1 PLUS expression:e2
                 {: RESULT = new plus(curr_lineno(), e1, e2); :}
                 |
                 expression:e1 MINUS expression:e2
                 {: RESULT = new sub(curr_lineno(), e1, e2); :}
                 |
                 expression:e1 MULT expression:e2
                 {: RESULT = new mul(curr_lineno(), e1, e2); :}
                 |
                 expression:e1 DIV expression:e2
                 {: RESULT = new divide(curr_lineno(), e1, e2); :}
                 |
                 NEG expression:e
                 {: RESULT = new neg(curr_lineno(), e); :}
                 |
                 expression:e1 LT expression:e2
                 {: RESULT = new lt(curr_lineno(), e1, e2); :}
                 |
                 expression:e1 LE expression:e2
                 {: RESULT = new leq(curr_lineno(), e1, e2); :}
                 |
                 expression:e1 EQ expression:e2
                 {: RESULT = new eq(curr_lineno(), e1, e2); :}
                 |
                 NOT expression:e
                 {: RESULT = new comp(curr_lineno(), e); :}
;
